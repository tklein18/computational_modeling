fav_users <- my_faves %>%
select(screen_name) %>%
distinct()
fav_users
lookup_users('TommyPPickles')
fav_users <- my_faves %>%
select(screen_name) %>%
distinct() %>%
unlist()
fav_users_list <- my_faves %>%
select(screen_name) %>%
distinct() %>%
unlist()
fav_users_df <- lookup_users(fav_users_list)
fav_users_df$friends_count
fav_users_df %>%
arrange(desc(friends_count)) %>%
select(screen_name, friends_count)
shiny::runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
install.packages('plotly')
shiny::runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
install.packages('ggiraph')
install.packages("ggiraph")
shiny::runApp('Desktop/option_sim_app/option_app')
install.packages('ggplot2')
runApp('Desktop/option_sim_app/option_app')
library('ggplot2')
library(ggplot2)
install.packages('ggplot2')
shiny::runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
library(ggiraph)
install.packages('ggiraph')
library(ggiraph)
shiny::runApp('Desktop/option_sim_app/option_app')
runApp('Desktop/option_sim_app/option_app')
df <- data.frame(runif(3), runif(3))
names(df) <- c(1, 2)
df
df$`3` <- df$`1` + df$`2`
df
# how much memory does Y occupy?
x <- runif(1e6)
y <- list(x, x, x)
memory.profile(y)
memory.profile()
memory.size()
memory.size(y)
7.6 * 3
# on which line does a get copied in code below?
a <- c(1, 5, 3, 2)
b <- a
b[[1]] <- 10
obj_size(y)
install.packages('lobstr')
#libs
library(lobstr)
obj_size(y)
# describe relationship betweenn a, b, c, and d
a <- 1:10
b <- a
c <- b
d <- 1:10
obj_addr(a)
obj_addr(d)
obj_addr(b)
# the following code accesses the mean function
# do they reference the same object in memory?
mean
base::mean
get("mean")
evalq(mean)
match.fun("mean")
obj_addr(mean)
obj_addr(base::mean)
obj_addr(get("mean"))
obj_addr(match.fun("mean"))
# 2 why does traceback show two copies here?
x <- c(1L, 2L, 3L)
tracemem(x)
x[[3]] <- 4
setwd(
paste(
'/Users/tklein/Desktop/JHU_Classes/computational_modeling',
'Assignment_5', sep = ''
)
)
getwd()
setwd(
paste(
'/Users/tklein/Desktop/JHU_Classes/computational_modeling',
'/Assignment_5', sep = ''
)
)
getwd()
# libs
library(tidyverse)
read.csv(
paste(
'artificial_results/Corridor-output-for-q-0.1.csv', sep = ''
),
skip = 16
)
test <- read.csv(
paste(
'artificial_results/Corridor-output-for-q-0.1.csv', sep = ''
),
skip = 16
)
View(test)
test_q <- read.csv(
paste(
'artificial_results/Corridor-output-for-q-0.1.csv', sep = ''
),
skip = 16, nrows = 1
)
View(test_q)
test_q <- read.csv(
paste(
'artificial_results/Corridor-output-for-q-0.1.csv', sep = ''
),
skip = 6, nrows = 1
)
test_q <- read.csv(
paste(
'artificial_results/Corridor-output-for-q-0.1.csv', sep = ''
),
skip = 3, nrows = 1
)
test_q <- read.csv(
paste(
'artificial_results/Corridor-output-for-q-0.1.csv', sep = ''
),
skip = 4, nrows = 1
)
test_q <- read.csv(
paste(
'artificial_results/Corridor-output-for-q-0.1.csv', sep = ''
),
skip = 5, nrows = 1
)
temp_q <- read.csv(
paste(
'artificial_results/Corridor-output-for-q-0.1.csv', sep = ''
),
skip = 5, nrows = 1
)
temp_q_value <- temp_q %>% pull(selected_q_value)
temp_data <- read.csv(
paste(
'artificial_results/Corridor-output-for-q-0.1.csv', sep = ''
),
skip = 16
)
temp_frame <- temp_frame %>%
mutate(
q_value = temp_q_value
)
temp_data <- temp_data %>%
mutate(
q_value = temp_q_value
)
View(temp_data)
for(i in c('artificial_results', 'real_results')){
data_files <- list.files(path = i)
}
for(i in c('artificial_results', 'real_results')){
data_files <- list.files(path = i)
for(f in data_files){
temp_data <- read.csv(
paste(
i, f, sep = '/'
),
skip = 16
)
temp_q <- read.csv(
paste(
i, f, sep = '/'
),
skip = 5, nrows = 1
)
temp_q_value <- temp_q %>% pull(selected_q_value)
temp_data <- temp_data %>%
mutate(
q_value = temp_q_value,
model_type = i
)
}
}
model_results <- data.frame()
for(i in c('artificial_results', 'real_results')){
data_files <- list.files(path = i)
for(f in data_files){
temp_data <- read.csv(
paste(
i, f, sep = '/'
),
skip = 16
)
temp_q <- read.csv(
paste(
i, f, sep = '/'
),
skip = 5, nrows = 1
)
temp_q_value <- temp_q %>% pull(selected_q_value)
temp_data <- temp_data %>%
mutate(
q_value = temp_q_value,
model_type = i
)
model_results <- bind_rows(model_results, temp_data)
}
}
model_results <- model_results %>%
mutate(
q_value_factor = as.factor(q, levels = as.character(seq(0, 1, .1)))
)
model_results <- model_results %>%
mutate(
q_value_factor = factor(q, levels = as.character(seq(0, 1, .1)))
)
seq(0, 1, .1)
as.character(0.0)
as.character(seq(0, 1, .1))
model_results <- model_results %>%
mutate(
q_value_factor = factor(q, levels = as.character(seq(0, 1, .1)))
)
q_factor_levels <- as.character(seq(0, 1, .1))
model_results <- model_results %>%
mutate(
q_value_factor = factor(q, levels = q_factor_levels)
)
model_results <- model_results %>%
mutate(
q_value_factor = factor(q_value, levels = q_factor_levels)
)
q_factor_levels <-
model_results <- model_results %>%
mutate(
q_value_factor = factor(q_value, levels = as.character(seq(0, 1, .1)))
)
View(model_results)
graphing_data <- model_results %>%
mutate(
q_value_factor = factor(q_value, levels = as.character(seq(0, 1, .1)))
) %>%
filter(
q_value_factor %in% c('0.1', '0.3', '0.5', '0.7', '0.9')
)
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(y = 'Corridor Width')
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(y = 'Corridor Width', x = 'Tick')
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(y = 'Corridor Width', x = 'Tick')+
theme_bw()
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(
y = 'Corridor Width',
x = 'Tick',
color = 'q'
)+
theme_bw()
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(
y = 'Corridor Width',
x = 'Tick',
color = 'q'
)+
theme_bw()+
ggtitle(
'Corridor Width - Artificial Landscape Models'
)
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(
y = 'Corridor Width',
x = 'Tick',
color = 'q'
)+
theme_bw()+
theme(legend.position = c(1, 1))+
ggtitle(
'Corridor Width - Artificial Landscape Models'
)
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(
y = 'Corridor Width',
x = 'Tick',
color = 'q'
)+
theme_bw()+
theme(legend.position = c(.7, .7))+
ggtitle(
'Corridor Width - Artificial Landscape Models'
)
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(
y = 'Corridor Width',
x = 'Tick',
color = 'q'
)+
theme_bw()+
theme(legend.position = c(.8, .75))+
ggtitle(
'Corridor Width - Artificial Landscape Models'
)
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(
y = 'Corridor Width',
x = 'Tick',
color = 'q'
)+
theme_bw()+
theme(legend.position = c(.9, .75))+
ggtitle(
'Corridor Width - Artificial Landscape Models'
)
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(
y = 'Corridor Width',
x = 'Tick',
color = 'q'
)+
scale_color_viridis_d()+
theme_bw()+
theme(legend.position = c(.9, .75))+
ggtitle(
'Corridor Width - Artificial Landscape Models'
)
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(
y = 'Corridor Width',
x = 'Tick',
color = 'q'
)+
scale_color_viridis_d(option = 'A')+
theme_bw()+
theme(legend.position = c(.9, .75))+
ggtitle(
'Corridor Width - Artificial Landscape Models'
)
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(
y = 'Corridor Width',
x = 'Tick',
color = 'q'
)+
scale_color_viridis_d(option = 'B')+
theme_bw()+
theme(legend.position = c(.9, .75))+
ggtitle(
'Corridor Width - Artificial Landscape Models'
)
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(
y = 'Corridor Width',
x = 'Tick',
color = 'q'
)+
scale_color_viridis_d(option = 'C')+
theme_bw()+
theme(legend.position = c(.9, .75))+
ggtitle(
'Corridor Width - Artificial Landscape Models'
)
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(
y = 'Corridor Width',
x = 'Tick',
color = 'q'
)+
scale_color_viridis_d(option = 'D')+
theme_bw()+
theme(legend.position = c(.9, .75))+
ggtitle(
'Corridor Width - Artificial Landscape Models'
)
graphing_data %>%
filter(
model_type == 'artificial_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(
y = 'Corridor Width',
x = 'Tick',
color = 'q'
)+
scale_color_viridis_d(option = 'D')+
theme_bw()+
theme(legend.position = c(.9, .75))+
ggtitle(
'Corridor Width - Artificial Landscape Models'
)+
ggsave(
'Klein_assignment5_artificial_graph.png', width = 13, height = 6
)
graphing_data %>%
filter(
model_type == 'real_results'
) %>%
ggplot(aes(x, y))+
geom_line(aes(color = q_value_factor))+
labs(
y = 'Corridor Width',
x = 'Tick',
color = 'q'
)+
scale_color_viridis_d(option = 'D')+
theme_bw()+
theme(legend.position = c(.9, .75))+
ggtitle(
'Corridor Width - Real Landscape Models'
)+
ggsave(
'Klein_assignment5_real_graph.png', width = 13, height = 6
)
